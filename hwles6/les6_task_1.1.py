# Для каждого упражнения написать программную реализацию.
# Код пишите в файлах с расширением .py в кодировке UTF-8 (в PyCharm работает по умолчанию). Каждую задачу необходимо
# сохранять в отдельный файл. Рекомендуем использовать английские имена, например, les_6_task_1.
# Для оценки «Отлично» необходимо выполнить все требования, указанные в задании и примечаниях.

# Подсчитать, сколько было выделено памяти под переменные в ранее разработанных программах в рамках первых трех уроков.
# Проанализировать результат и определить программы с наиболее эффективным использованием памяти.
# Примечание: По аналогии с эмпирической оценкой алгоритмов идеальным решением будет:

#● выбрать хорошую задачу, которую имеет смысл оценивать по памяти (укажите какую задачу вы взяли в комментарии);

#● написать 3 варианта кода (один у вас уже есть);

#● проанализировать 3 варианта и выбрать оптимальный;

#● результаты анализа (количество занятой памяти в вашей среде разработки) вставить в виде комментариев в файл с кодом.
# Не забудьте указать версию и разрядность вашей ОС и интерпретатора Python;

#● написать общий вывод: какой из трёх вариантов лучше и почему.

#Надеемся, что вы не испортили программы, добавив в них множество sys.getsizeof после каждой переменной, а проявили творчество,
# фантазию и создали универсальный код для замера памяти.



# 3 задание 3 урока
# В массиве случайных целых чисел поменять местами минимальный и максимальный элементы.


import sys
import random

SIZE_N = 10
MIN_ITEM = 0
MAX_ITEM = 100
i_min = 0
i_max = 0


array = [random.randint(MIN_ITEM, MAX_ITEM) for _ in range(SIZE_N)]
print(array, '\n')

for i in range(1, len(array)):
    if array[i] < array[i_min]:
        i_min = i
    if array[i] > array[i_max]:
        i_max = i

array[i_min], array[i_max] = array[i_max], array[i_min]

print(array)

print('*' * 100)
print(sys.getsizeof(array))
print(sys.getsizeof(i_min))
print(sys.getsizeof(i_max))
sum_ = sys.getsizeof(array) + sys.getsizeof(i_min) + sys.getsizeof(i_max)
print(f'Общая сумма занимаемой памяти {sum_} байт')


# Python 3.8 / Win 7 / 64-разрядная ОС /
#
#  В первом варианте использовано - 120 байт ОП
#  Во втором варианте использовано - 120 байт ОП
#  Во втором варианте использовано - 324 байт ОП

# Наиболее оптимальный вариант решения данной задачи в плане минимального занятия оперативной памяти памяти 1 и 2 варианты,
# т.к. третьем варианте дополнительно используются дополнительные переменные и список, тем самым занимается еще больше оперативной памяти.